@model VoiceChat.Web.Models.VoiceRoomModel

@{
    ViewData["Title"] = "VoiceRoom";
}

<div class="enter-name-bg modal-bg">
    <div class="enter-name">
        <form>
            <h2>Enter your name</h2>
            <input type="text" />
            <span class="wrong-input"></span>
            <input type="submit" value="Join" />
        </form>
    </div>
</div>

<div class="voice-room" data-key="@Model.Key">
    <div class="users">
        <ul>
            @foreach (var user in Model.Users)
            {
                <li>@user.Value</li>
            }
        </ul>

        <div class="change-user-volume hidden">
            <span>User Volume:  <span class="volume-percentage">100</span>%</span>
            <div class="volume-bar">
                <div class="volume-bar-active"></div>
                <div class="volume-bar-handle"></div>
            </div>
        </div>
    </div>

    <div class="messages">
    </div>

    <div class="create-message">
        <form>
            <input type="text" placeholder="Type here" />
            <input type="submit" value="Send" />
        </form>
    </div>
</div>

<div class="settings-icon">
    <i class="fas fa-cog"></i>
</div>

<div class="settings-bg modal-bg hidden">
    <div class="settings">
        <div class="volume-settings">
            <div class="change-input-volume">
                <span>Input Volume:  <span class="volume-percentage">100</span>%</span>
                <div class="volume-bar">
                    <div class="volume-bar-active"></div>
                    <div class="volume-bar-handle"></div>
                </div>
            </div>
            <div class="change-output-volume">
                <span>Output Volume:  <span class="volume-percentage">100</span>%</span>
                <div class="volume-bar">
                    <div class="volume-bar-active"></div>
                    <div class="volume-bar-handle"></div>
                </div>
            </div>
        </div>
        <span>Volume Gate</span>
        <div class="volume-gate">
            <div class="gated-volume"></div>
            <div class="volume-gate-handle"></div>
            <div class="active-volume"></div>
        </div>
        <button class="listen-to-own-voice">Check how you sound</button>
        <button class="close-settings"><i class="fas fa-times"></i></button>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let connection = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/voiceRoom')
                .withHubProtocol(new signalR.protocols.msgpack.MessagePackHubProtocol())
                .build();

            connection.start();

            const key = $('.voice-room').data('key');

            var context;
            var usersStartAts = {};
            var usersVolumes = {};
            var subject;
            var sendingVoice = false;
            var volumeGate = 5;
            var inputVolume = 100;
            var outputVolume = 100;

            var changingUserVolume = false;
            var changingInputVolume = false;
            var changingOutputVolume = false;
            var changingVolumeGate = false;
            var listeningToOwnVoice = false;
            var currentUserIdSelected;

            function onUserClick() {
                $('.change-user-volume').removeClass('hidden');
                currentUserIdSelected = $(this).data('id');

                if (usersVolumes[currentUserIdSelected] === undefined)
                    usersVolumes[currentUserIdSelected] = 100;

                $('.change-user-volume .volume-percentage').text(usersVolumes[currentUserIdSelected]);
                $('.change-user-volume .volume-bar-active').width(usersVolumes[currentUserIdSelected] / 2 + '%');

            };

            $(document).mousedown(function (e) {
                var div = $('.change-user-volume');

                if (div.hasClass('hidden')) {
                    div.css('left', e.pageX);
                    div.css('top', e.pageY);
                }

                if (!$(e.target).closest('.change-user-volume').length) {
                    div.addClass('hidden');
                }
                else {
                    return;
                }

                div.css('left', e.pageX);
                div.css('top', e.pageY);

            });

            function changeVolume(mouseX, volumeBar) {
                var barX = $(volumeBar).offset().left;
                var volumePercentage = Math.round((mouseX - barX) / $(volumeBar).width() * 2 * 100);

                if (volumePercentage < 0)
                    volumePercentage = 0;
                if (volumePercentage > 200)
                    volumePercentage = 200;

                $(volumeBar).parent().find('.volume-percentage').text(volumePercentage);
                $(volumeBar).find('.volume-bar-active').width(volumePercentage / 2 + '%');

                if (changingUserVolume) {
                    usersVolumes[currentUserIdSelected] = volumePercentage;
                    return;
                }
                if (changingInputVolume) {
                    inputVolume = volumePercentage;
                    return;
                }
                if (changingOutputVolume) {
                    outputVolume = volumePercentage;
                }

            }

            function changeVolumeGate(mouseX) {
                var barX = $('.volume-gate').offset().left;
                var volumePercentage = (mouseX - barX) / $('.volume-gate').width() * 100;

                if (volumePercentage < 0)
                    volumePercentage = 0;
                if (volumePercentage > 100)
                    volumePercentage = 100;

                $('.volume-gate-handle').css('left', volumePercentage + '%');
                volumeGate = volumePercentage;
            }

            $('.change-user-volume .volume-bar').mousedown(function (e) {
                e.preventDefault();
                changingUserVolume = true;
                changeVolume(e.pageX, this);
            });

            $('.change-input-volume .volume-bar').mousedown(function (e) {
                e.preventDefault();
                changingInputVolume = true;
                changeVolume(e.pageX, this);
            });

            $('.change-output-volume .volume-bar').mousedown(function (e) {
                e.preventDefault();
                changingOutputVolume = true;
                changeVolume(e.pageX, this);
            });

            $('.volume-gate').mousedown(function (e) {
                e.preventDefault();
                changingVolumeGate = true;
                changeVolumeGate(e.pageX);
            });

            $(document).mouseup(function () {
                changingUserVolume = false;
                changingOutputVolume = false;
                changingInputVolume = false;
                changingVolumeGate = false;
            });

            $(document).mousemove(function (e) {
                if (changingUserVolume) {
                    changeVolume(e.pageX, $('.change-user-volume .volume-bar')[0]);
                    return;
                }
                if (changingInputVolume) {
                    changeVolume(e.pageX, $('.change-input-volume .volume-bar')[0]);
                    return;
                }
                if (changingOutputVolume) {
                    changeVolume(e.pageX, $('.change-output-volume .volume-bar')[0]);
                    return;
                }
                if (changingVolumeGate) {
                    changeVolumeGate(e.pageX);
                    return;
                }
            });

            $('.settings-icon').click(function () {
                $('.settings-bg').removeClass('hidden');
            });

            $('.close-settings').click(function (e) {
                e.preventDefault();
                $('.settings-bg').addClass('hidden');

                listeningToOwnVoice = false;
                $('.listen-to-own-voice').text('Check how you sound');
            });

            $('.listen-to-own-voice').click(function (e) {
                e.preventDefault();
                listeningToOwnVoice = !listeningToOwnVoice;

                if (listeningToOwnVoice)
                    $(this).text('Stop');
                else
                    $(this).text('Check how you sound')
            })

            function prepereVoiceSending() {

                subject = new signalR.Subject();

                connection.invoke("SendVoice", subject, key);
            }

            function sendVoice(buffer) {
                subject.next(buffer);
            }

            function stopVoiceSending() {
                subject.complete();
            }

            function enoughVolume(analyser) {
                var array = new Uint8Array(analyser.frequencyBinCount);
                analyser.getByteFrequencyData(array);

                var length = array.length;
                var i = 0;
                while (i < length) {
                    var values = 0;
                    for (var j = i; j < i + 128 && j < length; j++) {
                        values += array[j];
                    }
                    i += 128;

                    if (values / 128 >= volumeGate)
                        return true;
                }

                return false;
            }

            function calculateInputVolume(analyser) {
                var array = new Uint8Array(analyser.frequencyBinCount);
                analyser.getByteFrequencyData(array);

                var maxVal = 0;

                var length = array.length;
                var i = 0;
                while (i < length) {
                    var values = 0;
                    for (var j = i; j < i + 128 && j < length; j++) {
                        values += array[j];
                    }
                    i += 128;

                    if (values / 128 > maxVal)
                        maxVal = values / 128;
                }

                if (maxVal > 100)
                    maxVal = 100;

                if (maxVal <= volumeGate) {
                    $('.gated-volume').width(maxVal + '%');
                    $('.active-volume').width(0);
                }
                else {
                    $('.gated-volume').width(volumeGate + '%');
                    $('.active-volume').width(maxVal - volumeGate + '%');
                }
            }

            function playSound(item) {
                var source = context.createBufferSource();
                var buffer = context.createBuffer(1, 1024, context.sampleRate);
                var array = buffer.getChannelData(0);

                for (var i = 0; i < 1024; i++) {
                    array[i] = item[1][i];
                }

                source.buffer = buffer;

                if (!usersStartAts[item[0]]) {
                    usersStartAts[item[0]] = 0;
                }

                usersStartAts[item[0]] = Math.max(context.currentTime, usersStartAts[item[0]]);

                if (usersVolumes[item[0]] === undefined)
                    usersVolumes[item[0]] = 100;

                var gainNode = context.createGain();
                gainNode.gain.value = usersVolumes[item[0]] / 100 * outputVolume / 100;
                gainNode.connect(context.destination);
                source.connect(gainNode);

                source.start(usersStartAts[item[0]]);
                usersStartAts[item[0]] += buffer.duration;
            }

            function startlistening() {
                connection.stream('StartListening', key)
                    .subscribe({
                        next: (item) => {
                            playSound(item);
                        }
                    });
            }

            $('.enter-name form').submit(function (e) {
                e.preventDefault();

                var username = $(this).find('input[type="text"]').val();

                if (!username || username == "") {
                    $(this).find('.wrong-input').text('Username cannot be empty');
                    return false;
                }

                connection.invoke('Join', key, username).then(function (users) {

                    if (users == null) {
                        window.location.replace('@Url.Action("Index")');
                    }

                    var usersUl = $('.users ul');
                    usersUl.empty();

                    users.forEach(function (user) {
                        var li = $('<li>');
                        li.data('id', user.ConnectionId);
                        li.text(user.Name);
                        usersUl.append(li);


                        if (connection.connectionId != user.ConnectionId)
                            li.click(onUserClick);
                        else
                            li.addClass('you');
                    });

                    context = new AudioContext();

                    navigator.mediaDevices.getUserMedia({ audio: true }).then(function (stream) {
                        var source = context.createMediaStreamSource(stream);

                        var node = context.createScriptProcessor(1024, 1, 1);

                        var analyser = context.createAnalyser();
                        analyser.smoothingTimeConstant = 0.8;
                        analyser.fftSize = 512;

                        var gainNode = context.createGain();
                        gainNode.gain.value = inputVolume / 100;

                        source.connect(gainNode);
                        gainNode.connect(analyser);
                        analyser.connect(node);
                        node.connect(context.destination);

                        node.onaudioprocess = function (e) {
                            gainNode.gain.value = inputVolume / 100;
                            var inputData = e.inputBuffer.getChannelData(0);

                            if (!$('.settings-bg').hasClass('hidden')) {
                                calculateInputVolume(analyser);
                            }

                            if (listeningToOwnVoice && enoughVolume(analyser)) {
                                var arr = [];
                                arr.push('you');
                                arr.push(inputData);
                                playSound(arr);
                                return;
                            }

                            if (!enoughVolume(analyser)) {
                                if (sendingVoice)
                                    stopVoiceSending();
                                sendingVoice = false;
                            }
                            else {
                                if (!sendingVoice) {
                                    sendingVoice = true;
                                    prepereVoiceSending();
                                }

                                sendVoice(inputData);
                            }
                        }
                    });

                    startlistening();
                });

                $('.enter-name-bg').remove();
                return false;
            });

            $('.create-message form').submit(function (e) {
                e.preventDefault();
                connection.invoke('SendMessage', $('.voice-room').data('key'), $(this).find('input[type="text"]').val());

                $(this).find('input[type="text"]').val('');

                return false;
            });

            connection.on('NewMessage', function (connectionId, content) {
                var user = $('.users li').filter(function () {
                    return $(this).data('id') == connectionId;
                });

                if (!user.length)
                    return;

                var message = $('<div class="message"></div>');
                var messageAuthor = $('<div class="message-author"></div>');
                var messageContent = $('<div class="message-content"></div>');

                message.append(messageAuthor);
                message.append(messageContent);

                messageAuthor.text(user.text());
                messageContent.text(content);

                $('.messages').append(message);
            });

            connection.on('NewUser', function (connectionId, userName) {
                var li = $('<li>');
                $('.users ul').append(li);

                li.data('id', connectionId);
                li.text(userName);

                li.click(onUserClick);
            });

            connection.on('UserDisconnected', function (connectionId) {
                $('.users ul li').filter(function () {
                    return $(this).data('id') == connectionId;
                }).remove();
            });

        });
    </script>
}